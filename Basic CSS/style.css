/* --------------------------------SELECTORS--------------------------------------- */

/* Difference between p.red and .red is that p.red will
target red class of only paragraph whereas .red will target all
red classes like header also */
/* color: red means property: value */
/* p.red {
    color: red;
} */

/* Element selector */
/* p {
  color: red;
} */

/* Class selector */
.red {
  color: red;
}
.blue {
  background-color: blue;
}

/* ID selector */
/* . is used for classes and # is used for styling IDs */
#green {
  color: green;
}

/* Grouping selector */
.p1,
.p2,
.p3 {
  color: brown;
}

/*  Order of priority 
    That is if these selectors are present what will happen
    Element < Class < ID < Inline 
    But it is not recommended to use inline styling
*/

/*  Pseudo selectors
    These are generally used with anchor tags  */
.red:hover {
  color: white;
}

/*  There are attribute and advanced selectors also but most of the work can be done using  these selectors */

/* in colors we also have the term opacity we can specify colors using rgba(,,,0-1)
   this is better than changing colors since in transitions you mainly change the 
   alpha value rather than the color each and every time */

/* --------------------------------SELECTORS--------------------------------------- */

/* Fonts */
.fonts {
  font-family: cursive;
  /* pixel is 96th of inch */
  font-size: 23px;
  font-weight: bold;
}
.span_f {
  font-style: italic;
  color: bisque;
}

.borders {
  border: 5px red solid;
}

.image_bg {
  height: 200px;
  width: 500px;
  border: 5px red solid;
  background-image: url("https://static.toiimg.com/thumb/72975551.cms?width=200&height=100&imgsize=881753");
  background-repeat: no-repeat;
  background-position: center center;
  /* To cover the background with the image we use
     This will compromise on quality */
  background-size: cover;
}

/* Suppose you fix a width and then change padding margin or border then the width will change. To keep the width constant irrespective of padding and margin we use box sizing */
.box {
  /* background-color: aqua; */
  /* You can add multiple colors  */
  background: linear-gradient(to right, green, yellow);
  /* To make diagonal gradients */
  background: linear-gradient(to bottom right, green, yellow);
  /* We can also use angles to make them end at a specific place */
  background: linear-gradient(56deg, green, yellow);
  /* There is radial gradients also but I don't like it */
  border: 10px black solid;
  padding: 20px;
  /* general convention of sizing is to have widths in % */
  margin: 10px auto;
  width: 500px;
  box-sizing: border-box;
  /* Display is used to remove any element without taking any space */
  display: none;
}

/* This is a universal selector */
/* We use this to have box sizing for all our elements and 0 padding and margin to begin with which we can override*/
/* Caution this will also override the padding and margin present on headings */
* {
  padding: 0px;
  margin: 0px;
  box-sizing: border-box;
}

/* Positioning of css elements */
.container {
  width: 100px;
  margin: 10px 10px;
  border: 2px red solid;
  height: 1500px;
}

/* notice the difference between sticky and fixed */
/* Sticky for nav bars and fixed for chat bare*/
.positioning {
  position: sticky;
  top: 20px;
}

/* We flex the display of the container */
.container_flex {
  border: 5px red solid;
  background-color: rgb(182, 182, 233);
  margin: 5px auto;
  padding: 10px;
  display: flex;

  /* To make the layouts responsive we set flex-wrap to wrap*/
  /* By default flex-wrap is set to nowrap */
  flex-wrap: wrap;

  /* Alignment */
  /* Justify content is for horizontal direction and align items is for vertical direction */
  /* To center the content */
  /* justify-content: center; */

  /* To vertically center we use */
  /* align-items: center; */
}

.item {
  width: 300px;
  height: 100px;
  text-align: center;
  border: 5px red solid;
  background-color: rgb(207, 221, 203);
  margin: 5px auto;
  padding: 10px;
}

/* Flex box item properties */
/* Flex items are arranged in ascending order of the order */
/* Flex grow is for how the flex items expand */
/* Flex grow, basis and shrink are used in items of the flex box */
/* Individual elements can be placed anywhere using elf align but this overrides
   overrides align items */
#item-1 {
  order: 10;
  align-self: flex-start;
}

/* em units*/
.container_size {
  text-align: center;
  border: 1em red solid;
}

/* Using rem units */
#head1 {
  font-size: 3em;
}

.container_height {
  height: 70vh;
  width: 70vw;
  border: 10px red solid;
  margin: 1em;
}

/* Experimenting with grid */
/* Setting the grid container */
/* In short Grid has more control over layout than flexbox */
.container-grid {
  display: grid;
  margin: 10px;
  /* grid-template-columns: auto auto;
  grid-template-rows: auto auto; */
  /* justify-content: start; is used for aligning horizontally */
  /* align-content: ; is for vertical alignment */
}
#item-1-grid {
  background-color: bisque;
  /* width: 70%; */
  margin: 5px;
  grid-row-start: 1;
  grid-row-end: span 5;
}
#item-2-grid {
  background-color: blue;
  margin: 5px;
  grid-column-start: 2;
  grid-column-end: 3;
  /* grid-row-start: 1;
  grid-row-end: span 2; */
  /* width: 20%; */
}
#item-3-grid {
  background-color: lightcoral;
  margin: 5px;
  /* width: 20%; */
}
#item-4-grid {
  background-color: magenta;
  margin: 5px;
  /* width: 20%; */
  grid-column: 2/2;
}

.container-media {
  text-align: center;
  font-size: 30px;
  border: 5px red solid;
  margin-bottom: 20px;
}

/* Three different cases */
@media only screen and (min-width: 0px) and (max-width: 500px) {
  .media {
    color: red;
  }
}
@media only screen and (min-width: 500px) and (max-width: 1000px) {
  .media {
    color: green;
  }
}
@media only screen and (min-width: 1000px) {
  .media {
    color: blue;
  }
}

/* Using variables */
.variables {
  text-align: center;
  font-size: 30px;
  border: 5px red solid;
  margin-top: 10px;
  margin-bottom: 20px;
}

:root {
  --back-color: yellow;
}
.para1 {
  --text-color: red;
  color: var(--text-color);
  background-color: var(--back-color);
}
.para2 {
  background-color: var(--back-color);
}

/* Using animation */
.animation {
  text-align: center;
  font-size: 30px;
  border: 5px red solid;
  margin-top: 10px;
  margin-bottom: 10px;
  animation-name: sarthak;
  animation-duration: 3s;
  animation-iteration-count: 1;
  /* if you want to keep your to part in your style */
  animation-fill-mode: forwards;
  animation-timing-function: ease-out;
  /* animation-delay: 3s; is for having a delay before starting the animation */
}

@keyframes sarthak {
  from {
    font-size: 10px;
  }
  to {
    font-size: 30px;
  }
}

/* Transitions */
.transitions {
  text-align: center;
  font-size: 20px;
  border: 5px red solid;
  margin-top: 10px;
  margin-bottom: 10px;
  background-color: aqua;
  /* We can make transition-property: all; to transition multiple properties */
  /* Hover only makes it change whereas transition gives it a smooth flow */
  transition-property: background-color;
  transition-duration: 3s;
  transition-timing-function: ease-out;
}

/* not ideal for mobile devices since you don't have hover */
.transitions:hover{
  background-color: blueviolet;
}

/* Transforms */
.transforms {
  text-align: center;
  font-size: 20px;
  border: 5px red solid;
  margin-top: 10px;
  margin-bottom: 10px;
  transition: all 2s ease-in-out;
}

.transforms:hover{
  transform: scale(2);
}